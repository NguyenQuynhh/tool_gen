"""
New Customer Generator v·ªõi ph√¢n kh√∫c m·ªõi
X(50%) - Kh√°ch h√†ng gi√†u c√≥, ti√™u nhi·ªÅu ti·ªÅn
Y(30%) - Kh√°ch h√†ng trung b√¨nh  
Z(20%) - Kh√°ch h√†ng √≠t ti·ªÅn
"""

import random
from datetime import datetime, timedelta
from typing import List
from dataclasses import dataclass

from test_config import test_config

@dataclass
class NewCustomer:
    """New Customer data structure"""
    customer_code: str
    full_name: str
    gender: str
    dob: datetime
    city: str
    marital_status: str
    nationality: str
    occupation: str
    income_range: str
    income_currency: str
    source_of_income: str
    status: str
    customer_segment: str

class NewCustomerGenerator:
    """New Customer Generator v·ªõi ph√¢n kh√∫c m·ªõi"""
    
    def __init__(self, config: test_config = None):
        self.config = config or test_config()
        
        # Updated segment distribution
        self.segment_distribution = {
            'X': 0.50,  # 50% - Kh√°ch h√†ng gi√†u c√≥
            'Y': 0.30,  # 30% - Kh√°ch h√†ng trung b√¨nh
            'Z': 0.20   # 20% - Kh√°ch h√†ng √≠t ti·ªÅn
        }
        
        # Age groups by segment
        self.age_groups_by_segment = {
            'X': (25, 55),      # 25-55 tu·ªïi
            'Y': (20, 55),      # 20-55 tu·ªïi
            'Z': [(18, 24), (55, 80)]  # <25 tu·ªïi ho·∫∑c >=55 tu·ªïi
        }
        
        # Occupation by segment
        self.occupation_by_segment = {
            'X': ['Qu·∫£n l√Ω / chuy√™n gia', 'Kinh doanh c√° th·ªÉ'],
            'Y': ['C√¥ng nh√¢n / lao ƒë·ªông ph·ªï th√¥ng', 'Nh√¢n vi√™n vƒÉn ph√≤ng'],
            'Z': ['Kh√°c (sinh vi√™n, n·ªôi tr·ª£‚Ä¶)', 'Nh√¢n vi√™n vƒÉn ph√≤ng', 'C√¥ng nh√¢n / lao ƒë·ªông ph·ªï th√¥ng']
        }
        
        # Income ranges by segment
        self.income_ranges_by_segment = {
            'X': ['20-50 tri·ªáu', '>50 tri·ªáu'],
            'Y': ['10-20 tri·ªáu', '20-50 tri·ªáu'],
            'Z': ['<10 tri·ªáu', '10-20 tri·ªáu']
        }
        
        # Source of income by segment
        self.source_of_income_by_segment = {
            'X': ['L∆∞∆°ng', 'Kinh doanh', 'ƒê·∫ßu t∆∞'],
            'Y': ['L∆∞∆°ng', 'Kinh doanh'],
            'Z': ['L∆∞∆°ng', 'Kh√°c']
        }
        
        # Vietnamese names
        self.vietnamese_names = {
            'male': [
                'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn VƒÉn B√¨nh', 'L√™ VƒÉn C∆∞·ªùng', 'Ph·∫°m VƒÉn D≈©ng', 'Ho√†ng VƒÉn Em',
                'V≈© VƒÉn Phong', 'ƒê·∫∑ng VƒÉn Giang', 'B√πi VƒÉn H·∫£i', 'ƒê·ªó VƒÉn H√πng', 'H·ªì VƒÉn Khoa',
                'Ng√¥ VƒÉn Long', 'D∆∞∆°ng VƒÉn Minh', 'L√Ω VƒÉn Nam', 'Phan VƒÉn Oanh', 'V√µ VƒÉn Ph√∫c',
                'ƒêinh VƒÉn Quang', 'T√¥n VƒÉn R·ªìng', 'L∆∞u VƒÉn S∆°n', 'Chu VƒÉn T√†i', 'L∆∞∆°ng VƒÉn Uy',
                'Nguy·ªÖn Minh Tu·∫•n', 'Tr·∫ßn ƒê·ª©c Th√†nh', 'L√™ Ho√†ng Nam', 'Ph·∫°m Quang Huy', 'Ho√†ng VƒÉn ƒê·ª©c',
                'V≈© Minh T√¢m', 'ƒê·∫∑ng Qu·ªëc B·∫£o', 'B√πi VƒÉn Th·∫Øng', 'ƒê·ªó Minh Khang', 'H·ªì VƒÉn T√†i'
            ],
            'female': [
                'Nguy·ªÖn Th·ªã An', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ Th·ªã C∆∞·ªùng', 'Ph·∫°m Th·ªã D≈©ng', 'Ho√†ng Th·ªã Em',
                'V≈© Th·ªã Phong', 'ƒê·∫∑ng Th·ªã Giang', 'B√πi Th·ªã H·∫£i', 'ƒê·ªó Th·ªã H√πng', 'H·ªì Th·ªã Khoa',
                'Ng√¥ Th·ªã Long', 'D∆∞∆°ng Th·ªã Minh', 'L√Ω Th·ªã Nam', 'Phan Th·ªã Oanh', 'V√µ Th·ªã Ph√∫c',
                'ƒêinh Th·ªã Quang', 'T√¥n Th·ªã R·ªìng', 'L∆∞u Th·ªã S∆°n', 'Chu Th·ªã T√†i', 'L∆∞∆°ng Th·ªã Uy',
                'Nguy·ªÖn Th·ªã Mai', 'Tr·∫ßn Th·ªã Lan', 'L√™ Th·ªã H∆∞∆°ng', 'Ph·∫°m Th·ªã Nga', 'Ho√†ng Th·ªã Linh',
                'V≈© Th·ªã Hoa', 'ƒê·∫∑ng Th·ªã Thu', 'B√πi Th·ªã Ng·ªçc', 'ƒê·ªó Th·ªã Y·∫øn', 'H·ªì Th·ªã Trang'
            ]
        }
        
        # Cities in Vietnam
        self.cities = [
            'H√† N·ªôi', 'TP. H·ªì Ch√≠ Minh', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°',
            'An Giang', 'B√† R·ªãa - V≈©ng T√†u', 'B·∫Øc Giang', 'B·∫Øc K·∫°n', 'B·∫°c Li√™u',
            'B·∫Øc Ninh', 'B·∫øn Tre', 'B√¨nh ƒê·ªãnh', 'B√¨nh D∆∞∆°ng', 'B√¨nh Ph∆∞·ªõc',
            'B√¨nh Thu·∫≠n', 'C√† Mau', 'Cao B·∫±ng', 'ƒê·∫Øk L·∫Øk', 'ƒê·∫Øk N√¥ng',
            'ƒêi·ªán Bi√™n', 'ƒê·ªìng Nai', 'ƒê·ªìng Th√°p', 'Gia Lai', 'H√† Giang',
            'H√† Nam', 'H√† Tƒ©nh', 'H·∫£i D∆∞∆°ng', 'H·∫≠u Giang', 'H√≤a B√¨nh',
            'H∆∞ng Y√™n', 'Kh√°nh H√≤a', 'Ki√™n Giang', 'Kon Tum', 'Lai Ch√¢u',
            'L√¢m ƒê·ªìng', 'L·∫°ng S∆°n', 'L√†o Cai', 'Long An', 'Nam ƒê·ªãnh',
            'Ngh·ªá An', 'Ninh B√¨nh', 'Ninh Thu·∫≠n', 'Ph√∫ Th·ªç', 'Ph√∫ Y√™n',
            'Qu·∫£ng B√¨nh', 'Qu·∫£ng Nam', 'Qu·∫£ng Ng√£i', 'Qu·∫£ng Ninh', 'Qu·∫£ng Tr·ªã',
            'S√≥c TrƒÉng', 'S∆°n La', 'T√¢y Ninh', 'Th√°i B√¨nh', 'Th√°i Nguy√™n',
            'Thanh H√≥a', 'Th·ª´a Thi√™n Hu·∫ø', 'Ti·ªÅn Giang', 'Tr√† Vinh', 'Tuy√™n Quang',
            'Vƒ©nh Long', 'Vƒ©nh Ph√∫c', 'Y√™n B√°i'
        ]

    def generate_customers_by_count(self, num_customers: int) -> List[NewCustomer]:
        """Generate customers by count with new segment distribution"""
        customers = []
        
        # Calculate segment counts
        x_count = int(num_customers * self.segment_distribution['X'])
        y_count = int(num_customers * self.segment_distribution['Y'])
        z_count = num_customers - x_count - y_count  # Remaining for Z
        
        print(f"üéØ Generating customers with new distribution:")
        print(f"   X (VIP - 50%): {x_count} customers")
        print(f"   Y (MEDIUM - 30%): {y_count} customers")
        print(f"   Z (LOW - 20%): {z_count} customers")
        
        # Generate X segment customers
        for i in range(x_count):
            customer = self._generate_customer_by_segment('X', i + 1)
            customers.append(customer)
        
        # Generate Y segment customers
        for i in range(y_count):
            customer = self._generate_customer_by_segment('Y', x_count + i + 1)
            customers.append(customer)
        
        # Generate Z segment customers
        for i in range(z_count):
            customer = self._generate_customer_by_segment('Z', x_count + y_count + i + 1)
            customers.append(customer)
        
        return customers

    def _generate_customer_by_segment(self, segment: str, customer_id: int) -> NewCustomer:
        """Generate customer by specific segment"""
        
        # Generate customer code
        customer_code = f"{segment}_{customer_id:06d}"
        
        # Generate gender
        gender = random.choice(['Nam', 'N·ªØ'])
        
        # Generate full name
        full_name = self._generate_vietnamese_name(gender)
        
        # Generate age based on segment
        age = self._generate_age_by_segment(segment)
        dob = datetime.now() - timedelta(days=age * 365)
        
        # Generate city
        city = random.choice(self.cities)
        
        # Generate marital status
        marital_status = random.choice(['ƒê·ªôc th√¢n', 'K·∫øt h√¥n'])
        
        # Generate nationality
        nationality = random.choices(['Vi·ªát Nam', 'N∆∞·ªõc ngo√†i'], weights=[0.98, 0.02])[0]
        
        # Generate occupation based on segment
        occupation = self._generate_occupation_by_segment(segment)
        
        # Generate income range based on segment
        income_range = self._generate_income_range_by_segment(segment)
        
        # Generate income currency
        income_currency = random.choices(['VND', 'USD'], weights=[0.95, 0.05])[0]
        
        # Generate source of income based on segment
        source_of_income = self._generate_source_of_income_by_segment(segment)
        
        # Generate status
        status = random.choices(['Active', 'Inactive', 'Closed'], weights=[0.80, 0.15, 0.05])[0]
        
        return NewCustomer(
            customer_code=customer_code,
            full_name=full_name,
            gender=gender,
            dob=dob,
            city=city,
            marital_status=marital_status,
            nationality=nationality,
            occupation=occupation,
            income_range=income_range,
            income_currency=income_currency,
            source_of_income=source_of_income,
            status=status,
            customer_segment=segment
        )

    def _generate_age_by_segment(self, segment: str) -> int:
        """Generate age based on segment"""
        if segment == 'X':
            # X: 25-55 tu·ªïi
            return random.randint(25, 55)
        elif segment == 'Y':
            # Y: 20-55 tu·ªïi
            return random.randint(20, 55)
        else:  # Z
            # Z: <25 tu·ªïi (50%) ho·∫∑c >=55 tu·ªïi (50%)
            if random.random() < 0.5:
                return random.randint(18, 24)  # <25 tu·ªïi
            else:
                return random.randint(55, 80)  # >=55 tu·ªïi

    def _generate_occupation_by_segment(self, segment: str) -> str:
        """Generate occupation based on segment"""
        if segment == 'X':
            # X: Qu·∫£n l√Ω/Chuy√™n gia (60%) + Kinh doanh c√° th·ªÉ (40%)
            return random.choices(
                self.occupation_by_segment['X'],
                weights=[0.6, 0.4]
            )[0]
        elif segment == 'Y':
            # Y: C√¥ng nh√¢n/Lao ƒë·ªông (50%) + Nh√¢n vi√™n vƒÉn ph√≤ng (50%)
            return random.choices(
                self.occupation_by_segment['Y'],
                weights=[0.5, 0.5]
            )[0]
        else:  # Z
            # Z: Nh√≥m kh√°c (80%) + c√°c ngh·ªÅ kh√°c (20%)
            return random.choices(
                self.occupation_by_segment['Z'],
                weights=[0.8, 0.1, 0.1]
            )[0]

    def _generate_income_range_by_segment(self, segment: str) -> str:
        """Generate income range based on segment"""
        if segment == 'X':
            # X: 20-50M (40%) + >50M (60%)
            return random.choices(
                self.income_ranges_by_segment['X'],
                weights=[0.4, 0.6]
            )[0]
        elif segment == 'Y':
            # Y: 10-20M (50%) + 20-50M (50%)
            return random.choices(
                self.income_ranges_by_segment['Y'],
                weights=[0.5, 0.5]
            )[0]
        else:  # Z
            # Z: <10M (70%) + 10-20M (30%)
            return random.choices(
                self.income_ranges_by_segment['Z'],
                weights=[0.7, 0.3]
            )[0]

    def _generate_source_of_income_by_segment(self, segment: str) -> str:
        """Generate source of income based on segment"""
        if segment == 'X':
            # X: L∆∞∆°ng (40%) + Kinh doanh (40%) + ƒê·∫ßu t∆∞ (20%)
            return random.choices(
                self.source_of_income_by_segment['X'],
                weights=[0.4, 0.4, 0.2]
            )[0]
        elif segment == 'Y':
            # Y: L∆∞∆°ng (70%) + Kinh doanh (30%)
            return random.choices(
                self.source_of_income_by_segment['Y'],
                weights=[0.7, 0.3]
            )[0]
        else:  # Z
            # Z: L∆∞∆°ng (60%) + Kh√°c (40%)
            return random.choices(
                self.source_of_income_by_segment['Z'],
                weights=[0.6, 0.4]
            )[0]

    def _generate_vietnamese_name(self, gender: str) -> str:
        """Generate Vietnamese full name"""
        if gender == 'Nam':
            return random.choice(self.vietnamese_names['male'])
        else:
            return random.choice(self.vietnamese_names['female'])

def main():
    """Test New Customer Generator"""
    generator = NewCustomerGenerator()
    
    # Generate test customers
    customers = generator.generate_customers_by_count(1000)
    
    print(f"\n‚úÖ Generated {len(customers)} customers")
    
    # Analyze segment distribution
    segment_counts = {}
    for customer in customers:
        segment = customer.customer_segment
        segment_counts[segment] = segment_counts.get(segment, 0) + 1
    
    print(f"\nüìä Segment Distribution:")
    for segment, count in segment_counts.items():
        percentage = (count / len(customers)) * 100
        print(f"   {segment}: {count} ({percentage:.1f}%)")
    
    # Analyze age distribution by segment
    print(f"\nüéÇ Age Distribution by Segment:")
    for segment in ['X', 'Y', 'Z']:
        segment_customers = [c for c in customers if c.customer_segment == segment]
        if segment_customers:
            ages = [(datetime.now() - c.dob).days // 365 for c in segment_customers]
            print(f"   {segment}: Min={min(ages)}, Max={max(ages)}, Mean={sum(ages)/len(ages):.1f}")
    
    # Analyze occupation distribution by segment
    print(f"\nüíº Occupation Distribution by Segment:")
    for segment in ['X', 'Y', 'Z']:
        segment_customers = [c for c in customers if c.customer_segment == segment]
        if segment_customers:
            occupations = [c.occupation for c in segment_customers]
            occupation_counts = {}
            for occ in occupations:
                occupation_counts[occ] = occupation_counts.get(occ, 0) + 1
            
            print(f"   {segment}:")
            for occ, count in occupation_counts.items():
                percentage = (count / len(segment_customers)) * 100
                print(f"     {occ}: {count} ({percentage:.1f}%)")

if __name__ == "__main__":
    main()
