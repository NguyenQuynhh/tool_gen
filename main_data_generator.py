"""
Main script ƒë·ªÉ sinh d·ªØ li·ªáu theo th·ª© t·ª±: SAVING TRANSACTION -> SAVING ACCOUNT -> CUSTOMER
Tu√¢n th·ªß quy t·∫Øc RFM v√† ph√¢n kh√∫c kh√°ch h√†ng theo README
"""

import pandas as pd
import numpy as np
from datetime import datetime
import os
import json
from typing import Dict

from customer_generator import CustomerGenerator
from savings_account_generator import SavingsAccountGenerator
from transaction_generator import TransactionGenerator

class DataGenerator:
    def __init__(self, seed: int = 42):
        self.seed = seed
        self.customer_gen = CustomerGenerator(seed)
        self.account_gen = SavingsAccountGenerator(seed)
        self.txn_gen = TransactionGenerator(seed)
        
        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs('output', exist_ok=True)
    
    def generate_full_dataset(self, num_customers: int = 55000, 
                            test_mode: bool = False) -> Dict[str, pd.DataFrame]:
        """
        Sinh to√†n b·ªô dataset theo th·ª© t·ª± y√™u c·∫ßu
        
        Args:
            num_customers: S·ªë l∆∞·ª£ng kh√°ch h√†ng (m·∫∑c ƒë·ªãnh 55,000)
            test_mode: N·∫øu True, ch·ªâ sinh 1,000 kh√°ch h√†ng ƒë·ªÉ test
        """
        if test_mode:
            num_customers = 1000
            print("üß™ CH·∫†Y CH·∫æ ƒê·ªò TEST - Ch·ªâ sinh 1,000 kh√°ch h√†ng")
        
        print(f"üöÄ B·∫Øt ƒë·∫ßu sinh d·ªØ li·ªáu cho {num_customers:,} kh√°ch h√†ng...")
        print("=" * 60)
        
        # B∆∞·ªõc 1: Sinh d·ªØ li·ªáu kh√°ch h√†ng
        print("üìã B∆∞·ªõc 1: Sinh d·ªØ li·ªáu b·∫£ng Customers...")
        start_time = datetime.now()
        customers_df = self.customer_gen.generate_customers(num_customers)
        print(f"‚úÖ Ho√†n th√†nh: {len(customers_df):,} kh√°ch h√†ng trong {datetime.now() - start_time}")
        
        # B∆∞·ªõc 2: Sinh d·ªØ li·ªáu t√†i kho·∫£n ti·∫øt ki·ªám
        print("\nüí≥ B∆∞·ªõc 2: Sinh d·ªØ li·ªáu b·∫£ng Savings Accounts...")
        start_time = datetime.now()
        accounts_df = self.account_gen.generate_accounts_for_customers(customers_df)
        print(f"‚úÖ Ho√†n th√†nh: {len(accounts_df):,} t√†i kho·∫£n trong {datetime.now() - start_time}")
        
        # B∆∞·ªõc 3: Sinh d·ªØ li·ªáu giao d·ªãch
        print("\nüí∞ B∆∞·ªõc 3: Sinh d·ªØ li·ªáu b·∫£ng Savings Transactions...")
        start_time = datetime.now()
        transactions_df = self.txn_gen.generate_all_transactions(accounts_df)
        print(f"‚úÖ Ho√†n th√†nh: {len(transactions_df):,} giao d·ªãch trong {datetime.now() - start_time}")
        
        # B∆∞·ªõc 4: C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n d·ª±a tr√™n giao d·ªãch
        print("\nüîÑ B∆∞·ªõc 4: C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n...")
        start_time = datetime.now()
        accounts_df = self.account_gen.update_account_status(accounts_df, transactions_df)
        print(f"‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t tr·∫°ng th√°i trong {datetime.now() - start_time}")
        
        # B∆∞·ªõc 5: Validate v√† b√°o c√°o
        print("\nüìä B∆∞·ªõc 5: Ki·ªÉm tra v√† b√°o c√°o d·ªØ li·ªáu...")
        self.generate_reports(customers_df, accounts_df, transactions_df)
        
        return {
            'customers': customers_df,
            'accounts': accounts_df, 
            'transactions': transactions_df
        }
    
    def generate_reports(self, customers_df: pd.DataFrame, 
                        accounts_df: pd.DataFrame, 
                        transactions_df: pd.DataFrame):
        """T·∫°o b√°o c√°o th·ªëng k√™ d·ªØ li·ªáu"""
        
        print("\n" + "="*60)
        print("üìà B√ÅO C√ÅO TH·ªêNG K√ä D·ªÆ LI·ªÜU")
        print("="*60)
        
        # B√°o c√°o kh√°ch h√†ng
        print("\nüë• TH·ªêNG K√ä KH√ÅCH H√ÄNG:")
        print(f"T·ªïng s·ªë kh√°ch h√†ng: {len(customers_df):,}")
        print("\nPh√¢n b·ªë theo ph√¢n kh√∫c:")
        segment_counts = customers_df['segment'].value_counts()
        for segment, count in segment_counts.items():
            percentage = count / len(customers_df) * 100
            print(f"  {segment.upper()}: {count:,} ({percentage:.1f}%)")
        
        print("\nPh√¢n b·ªë theo thu nh·∫≠p:")
        income_counts = customers_df['income_range'].value_counts()
        for income, count in income_counts.items():
            percentage = count / len(customers_df) * 100
            print(f"  {income}: {count:,} ({percentage:.1f}%)")
        
        # B√°o c√°o t√†i kho·∫£n
        print(f"\nüí≥ TH·ªêNG K√ä T√ÄI KHO·∫¢N:")
        print(f"T·ªïng s·ªë t√†i kho·∫£n: {len(accounts_df):,}")
        print(f"Trung b√¨nh t√†i kho·∫£n/kh√°ch h√†ng: {len(accounts_df)/len(customers_df):.2f}")
        
        print("\nPh√¢n b·ªë theo lo·∫°i s·∫£n ph·∫©m:")
        product_counts = accounts_df['product_type'].value_counts()
        for product, count in product_counts.items():
            percentage = count / len(accounts_df) * 100
            print(f"  {product}: {count:,} ({percentage:.1f}%)")
        
        print("\nPh√¢n b·ªë theo k·ª≥ h·∫°n:")
        term_counts = accounts_df['term_months'].value_counts()
        for term, count in term_counts.items():
            percentage = count / len(accounts_df) * 100
            print(f"  {term} th√°ng: {count:,} ({percentage:.1f}%)")
        
        print("\nPh√¢n b·ªë theo tr·∫°ng th√°i:")
        status_counts = accounts_df['status'].value_counts()
        for status, count in status_counts.items():
            percentage = count / len(accounts_df) * 100
            print(f"  {status}: {count:,} ({percentage:.1f}%)")
        
        # B√°o c√°o giao d·ªãch
        print(f"\nüí∞ TH·ªêNG K√ä GIAO D·ªäCH:")
        print(f"T·ªïng s·ªë giao d·ªãch: {len(transactions_df):,}")
        print(f"Trung b√¨nh giao d·ªãch/t√†i kho·∫£n: {len(transactions_df)/len(accounts_df):.2f}")
        
        print("\nPh√¢n b·ªë theo lo·∫°i giao d·ªãch:")
        txn_type_counts = transactions_df['transaction_type'].value_counts()
        for txn_type, count in txn_type_counts.items():
            percentage = count / len(transactions_df) * 100
            print(f"  {txn_type}: {count:,} ({percentage:.1f}%)")
        
        print("\nPh√¢n b·ªë theo k√™nh:")
        channel_counts = transactions_df['channel_txn'].value_counts()
        for channel, count in channel_counts.items():
            percentage = count / len(transactions_df) * 100
            print(f"  {channel}: {count:,} ({percentage:.1f}%)")
        
        print("\nPh√¢n b·ªë theo tr·∫°ng th√°i giao d·ªãch:")
        status_txn_counts = transactions_df['status_txn'].value_counts()
        for status, count in status_txn_counts.items():
            percentage = count / len(transactions_df) * 100
            print(f"  {status}: {count:,} ({percentage:.1f}%)")
        
        # Th·ªëng k√™ ti·ªÅn t·ªá
        print("\nPh√¢n b·ªë theo lo·∫°i ti·ªÅn t·ªá:")
        currency_counts = transactions_df['currency'].value_counts()
        for currency, count in currency_counts.items():
            percentage = count / len(transactions_df) * 100
            print(f"  {currency}: {count:,} ({percentage:.1f}%)")
        
        # Th·ªëng k√™ s·ªë ti·ªÅn
        print(f"\nTh·ªëng k√™ s·ªë ti·ªÅn giao d·ªãch:")
        print(f"  T·ªïng s·ªë ti·ªÅn: {transactions_df['amount'].sum():,.0f} VND")
        print(f"  S·ªë ti·ªÅn trung b√¨nh: {transactions_df['amount'].mean():,.0f} VND")
        print(f"  S·ªë ti·ªÅn l·ªõn nh·∫•t: {transactions_df['amount'].max():,.0f} VND")
        print(f"  S·ªë ti·ªÅn nh·ªè nh·∫•t: {transactions_df['amount'].min():,.0f} VND")
        
        # Ki·ªÉm tra RFM
        print(f"\nüéØ KI·ªÇM TRA PH√ÇN KH√öC RFM:")
        rfm_stats = self.txn_gen.validate_rfm_segments(transactions_df, accounts_df)
        print(f"Premium: {rfm_stats['premium_count']:,} ({rfm_stats['premium_percentage']:.1f}%)")
        print(f"Standard: {rfm_stats['standard_count']:,} ({rfm_stats['standard_percentage']:.1f}%)")
        print(f"Basic: {rfm_stats['basic_count']:,} ({rfm_stats['basic_percentage']:.1f}%)")
        
        # L∆∞u b√°o c√°o
        self.save_reports(customers_df, accounts_df, transactions_df, rfm_stats)
    
    def save_reports(self, customers_df: pd.DataFrame, 
                    accounts_df: pd.DataFrame, 
                    transactions_df: pd.DataFrame,
                    rfm_stats: Dict):
        """L∆∞u b√°o c√°o v√† d·ªØ li·ªáu ra file"""
        
        # L∆∞u d·ªØ li·ªáu CSV
        print(f"\nüíæ L∆∞u d·ªØ li·ªáu ra file...")
        customers_df.to_csv('output/customers.csv', index=False, encoding='utf-8-sig')
        accounts_df.to_csv('output/savings_accounts.csv', index=False, encoding='utf-8-sig')
        transactions_df.to_csv('output/savings_transactions.csv', index=False, encoding='utf-8-sig')
        
        # L∆∞u b√°o c√°o JSON
        report = {
            "generation_time": datetime.now().isoformat(),
            "total_customers": len(customers_df),
            "total_accounts": len(accounts_df),
            "total_transactions": len(transactions_df),
            "segment_distribution": customers_df['segment'].value_counts().to_dict(),
            "product_type_distribution": accounts_df['product_type'].value_counts().to_dict(),
            "transaction_type_distribution": transactions_df['transaction_type'].value_counts().to_dict(),
            "rfm_analysis": rfm_stats,
            "amount_statistics": {
                "total_amount": float(transactions_df['amount'].sum()),
                "average_amount": float(transactions_df['amount'].mean()),
                "max_amount": float(transactions_df['amount'].max()),
                "min_amount": float(transactions_df['amount'].min())
            }
        }
        
        with open('output/data_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o th∆∞ m·ª•c 'output/':")
        print("  - customers.csv")
        print("  - savings_accounts.csv") 
        print("  - savings_transactions.csv")
        print("  - data_report.json")

def main():
    """H√†m main ƒë·ªÉ ch·∫°y sinh d·ªØ li·ªáu"""
    print("üè¶ H·ªÜ TH·ªêNG SINH D·ªÆ LI·ªÜU NG√ÇN H√ÄNG")
    print("üìã Tu√¢n th·ªß quy t·∫Øc RFM v√† ph√¢n kh√∫c kh√°ch h√†ng")
    print("=" * 60)
    
    # T·∫°o generator
    generator = DataGenerator(seed=42)
    
    # H·ªèi ng∆∞·ªùi d√πng v·ªÅ ch·∫ø ƒë·ªô ch·∫°y
    print("\nCh·ªçn ch·∫ø ƒë·ªô ch·∫°y:")
    print("1. Test mode (1,000 kh√°ch h√†ng)")
    print("2. Full mode (55,000 kh√°ch h√†ng)")
    
    choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ").strip()
    
    if choice == "1":
        test_mode = True
        print("\nüß™ Ch·∫°y ch·∫ø ƒë·ªô TEST...")
    else:
        test_mode = False
        print("\nüöÄ Ch·∫°y ch·∫ø ƒë·ªô FULL...")
    
    # Sinh d·ªØ li·ªáu
    try:
        datasets = generator.generate_full_dataset(test_mode=test_mode)
        print(f"\nüéâ HO√ÄN TH√ÄNH! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c sinh th√†nh c√¥ng.")
        
    except Exception as e:
        print(f"\n‚ùå L·ªñI: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
